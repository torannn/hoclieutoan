document.addEventListener('DOMContentLoaded', async () => {
    // === Lấy các phần tử HTML ===
    const classSelectionScreen = document.getElementById('class-selection-screen');
    const examSelectionScreen = document.getElementById('exam-selection-screen');
    const examScreen = document.getElementById('exam-screen');
    const resultsScreen = document.getElementById('results-screen');
    const classMenu = document.getElementById('class-menu');
    const examMenu = document.getElementById('exam-menu');
    const backToClassSelectionBtn = document.getElementById('back-to-class-selection');
    const examTitleHeader = document.getElementById('exam-title-header');
    const timerDisplay = document.getElementById('timer');
    const examQuestionsContainer = document.getElementById('exam-questions-container');
    const submitExamBtn = document.getElementById('submit-exam-btn');
    const resultsContainer = document.getElementById('results-container');
    const questionCheckboxContainer = document.getElementById('question-checkbox-container');
    const userQueryInput = document.getElementById('user-query-input');
    const getAIExplanationBtn = document.getElementById('get-ai-explanation-btn');
    const aiExplanationArea = document.getElementById('ai-explanation-area');
    const restartBtn = document.getElementById('restart-btn');

    let timerInterval;
    let currentExamData;
    let examManifest;
    let userAnswers = {};

    // --- Tải dữ liệu manifest ---
    try {
        const response = await fetch('data/exams-manifest.json');
        if (!response.ok) throw new Error('Không thể tải file manifest!');
        examManifest = await response.json();
        
        // Hiển thị màn hình chọn lớp sau khi tải xong
        classSelectionScreen.classList.remove('hidden');
    } catch (error) {
        console.error(error);
        document.body.innerHTML = '<p style="color: red; text-align: center; padding: 20px;">Lỗi nghiêm trọng: Không thể tải dữ liệu học liệu. Vui lòng kiểm tra lại cấu trúc file.</p>';
        return;
    }

    // === Gán sự kiện ===
    classMenu.addEventListener('click', (e) => {
        if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
            const button = e.target.closest('button');
            const selectedGrade = button.dataset.grade;
            populateExamMenu(selectedGrade);
            classSelectionScreen.classList.add('hidden');
            examSelectionScreen.classList.remove('hidden');
        }
    });

    backToClassSelectionBtn.addEventListener('click', () => {
        examSelectionScreen.classList.add('hidden');
        classSelectionScreen.classList.remove('hidden');
    });

    submitExamBtn.addEventListener('click', () => {
        // Lưu câu trả lời của người dùng
        saveUserAnswers();
        
        // Tính điểm và hiển thị kết quả
        showResults();
    });

    restartBtn.addEventListener('click', () => {
        resultsScreen.classList.add('hidden');
        classSelectionScreen.classList.remove('hidden');
        currentExamData = null;
        userAnswers = {};
    });

    getAIExplanationBtn.addEventListener('click', () => {
    /**
     * Populate the exam menu with available exams and tools for the selected grade
     * @param {string} grade - The grade level (9, 10, 11, 12)
     */
    function populateExamMenu(grade) {
    const examMenu = document.getElementById('exam-menu');
    examMenu.innerHTML = '';
    const gradeKey = `grade${grade}`;
    const gradeData = examManifest.grades[gradeKey] || {};

    const allItems = [
        ...(gradeData.exams || []),
        ...(gradeData.tools || [])
    ];

    document.getElementById('exam-selection-title').textContent = `Học liệu Lớp ${grade}`;

    if (allItems.length > 0) {
        allItems.forEach(item => {
            const button = document.createElement('button');
            button.className = 'w-full sm:w-3/4 bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600';
            button.textContent = item.title;
            button.addEventListener('click', () => {
                if (item.type === 'tool' && item.url) {
                    window.location.href = item.url;
                } else if (item.type === 'exam') {
                    startExam(item);
                }
            });
            examMenu.appendChild(button);
        });
    } else {
        examMenu.innerHTML = `<p class="text-gray-500">Chưa có học liệu nào cho lớp này.</p>`;
    }
}
        examMenu.innerHTML = '';
        const gradeKey = `grade${grade}`;
        const gradeData = examManifest.grades[gradeKey] || {};

        // Combine exams and tools for display
        const allItems = [
            ...(gradeData.exams || []),
            ...(gradeData.tools || [])
        ];

        document.getElementById('exam-selection-title').textContent = `Học liệu Lớp ${grade}`;

        if (allItems.length > 0) {
            allItems.forEach(item => {
                const button = document.createElement('button');
                button.className = 'w-full sm:w-3/4 bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg hover:bg-blue-600';
                button.textContent = item.title;
                button.addEventListener('click', () => {
                    if (item.type === 'tool' && item.url) {
                        window.location.href = item.url;
                    } else if (item.type === 'exam') {
                        startExam(item);
                    }
                });
                examMenu.appendChild(button);
            });
        } else {
            examMenu.innerHTML = `<p class="text-gray-500">Chưa có học liệu nào cho lớp này.</p>`;
        }
    }
        try {
            // Tải đồng thời cả file câu hỏi và đáp án
            const [examRes, answersRes] = await Promise.all([
                fetch(examInfo.path + 'exam.json'),
                fetch(examInfo.path + 'answers.json')
            ]);

            if (!examRes.ok || !answersRes.ok) {
                throw new Error(`Không thể tải file đề thi cho: ${examInfo.title}`);
            }

            const examContent = await examRes.json();
            const answersContent = await answersRes.json();

            // Gộp đáp án vào dữ liệu câu hỏi
            examContent.questions.forEach(q => {
                if (q.is_group && q.sub_questions) {
                    q.sub_questions.forEach(sub_q => {
                        sub_q.model_answer = answersContent[sub_q.q_id] || "Chưa có đáp án.";
                    });
                } else {
                    q.model_answer = answersContent[q.q_id] || "Chưa có đáp án.";
                }
            });
            
            currentExamData = examContent; // Lưu dữ liệu đã gộp
            examTitleHeader.textContent = examInfo.title;
            
            // Hiển thị câu hỏi
            renderQuestions();
            
            // Hiển thị màn hình làm bài
            examSelectionScreen.classList.add('hidden');
            examScreen.classList.remove('hidden');
            
            // Khởi tạo bộ đếm thời gian nếu có
            if (currentExamData.duration) {
                startTimer(currentExamData.duration);
            }
            
            // Cuộn lên đầu trang
            window.scrollTo(0, 0);

        } catch (error) {
            console.error(error);
            alert('Đã có lỗi xảy ra khi tải đề thi. Vui lòng thử lại.');
            examTitleHeader.textContent = 'Lỗi';
        }
    }

    /**
     * Hiển thị câu hỏi lên giao diện
     */
    function renderQuestions() {
        if (!currentExamData?.questions?.length) {
            examQuestionsContainer.innerHTML = '<p class="text-red-500">Không có câu hỏi nào trong đề thi này.</p>';
            return;
        }

        let html = '';
        currentExamData.questions.forEach((q, index) => {
            if (q.is_group && q.sub_questions?.length) {
                // Nhóm câu hỏi con
                html += `
                    <div class="question-group mb-8 p-4 bg-gray-50 rounded-lg">
                        <h3 class="text-lg font-semibold mb-4">${q.group_title || 'Nhóm câu hỏi'}</h3>
                        <div class="space-y-6">
                `;
                
                q.sub_questions.forEach((subQ, subIndex) => {
                    const qId = `q_${index}_${subIndex}`;
                    html += renderQuestion(subQ, qId);
                });
                
                html += `
                        </div>
                    </div>
                `;
            } else {
                // Câu hỏi đơn lẻ
                const qId = `q_${index}`;
                html += renderQuestion(q, qId);
            }
        });

        examQuestionsContainer.innerHTML = html;
        
        // Khởi tạo lại MathJax để render công thức toán
        if (window.MathJax) {
            MathJax.typeset();
        }
    }

    /**
     * Tạo HTML cho một câu hỏi
     */
    function renderQuestion(question, qId) {
        return `
            <div class="question-container mb-6 p-4 bg-white rounded-lg shadow" id="${qId}_container">
                <div class="question-text mb-4">${question.question_text}</div>
                <div class="answer-input">
                    ${renderAnswerInput(question, qId)}
                </div>
                <div class="mt-2 text-sm text-gray-600">
                    <button class="show-answer-btn text-blue-600 hover:underline" 
                            onclick="document.getElementById('${qId}_answer').classList.toggle('hidden')">
                        Xem đáp án
                    </button>
                    <div id="${qId}_answer" class="hidden mt-2 p-2 bg-yellow-50 rounded">
                        ${question.model_answer || 'Chưa có đáp án.'}
                    </div>
                </div>
            </div>
        `;
    }

    /**
     * Tạo input phù hợp cho từng loại câu trả lời
     */
    function renderAnswerInput(question, qId) {
        // Kiểm tra nếu là câu hỏi trắc nghiệm (có đáp án A, B, C, D)
        const hasOptions = question.question_text.includes('<br>A.') || 
                         (question.question_text || '').includes('A. ');
        
        if (hasOptions) {
            // Tạo input radio cho câu hỏi trắc nghiệm
            let optionsHtml = '';
            ['A', 'B', 'C', 'D'].forEach(opt => {
                if (question.question_text.includes(`<br>${opt}.`)) {
                    const optId = `${qId}_${opt}`;
                    optionsHtml += `
                        <div class="flex items-center mb-2">
                            <input type="radio" id="${optId}" name="${qId}" value="${opt}" 
                                   class="mr-2" ${userAnswers[qId] === opt ? 'checked' : ''}>
                            <label for="${optId}" class="cursor-pointer">${opt}.</label>
                        </div>
                    `;
                }
            });
            return optionsHtml;
        } else {
            // Tạo textarea cho câu hỏi tự luận
            return `
                <textarea id="${qId}_input" 
                          class="w-full p-2 border rounded" 
                          rows="3" 
                          placeholder="Nhập câu trả lời của bạn...">${userAnswers[qId] || ''}</textarea>
            `;
        }
    }

    /**
     * Lưu câu trả lời của người dùng
     */
    function saveUserAnswers() {
        if (!currentExamData?.questions) return;
        
        currentExamData.questions.forEach((q, index) => {
            if (q.is_group && q.sub_questions?.length) {
                q.sub_questions.forEach((subQ, subIndex) => {
                    const qId = `q_${index}_${subIndex}`;
                    saveSingleAnswer(qId);
                });
            } else {
                const qId = `q_${index}`;
                saveSingleAnswer(qId);
            }
        });
    }

    /**
     * Lưu câu trả lời cho một câu hỏi
     */
    function saveSingleAnswer(qId) {
        // Kiểm tra input radio
        const radioInput = document.querySelector(`input[name="${qId}"]:checked`);
        if (radioInput) {
            userAnswers[qId] = radioInput.value;
            return;
        }
        
        // Kiểm tra textarea
        const textarea = document.getElementById(`${qId}_input`);
        if (textarea) {
            userAnswers[qId] = textarea.value.trim();
        }
    }

    /**
     * Hiển thị kết quả
     */
    function showResults() {
        if (!currentExamData) return;
        
        // Ẩn màn hình làm bài, hiện màn hình kết quả
        examScreen.classList.add('hidden');
        resultsScreen.classList.remove('hidden');
        
        // Tính điểm
        const score = calculateScore();
        
        // Tạo nội dung kết quả
        let resultsHtml = `
            <div class="bg-white p-6 rounded-lg shadow-md mb-6">
                <h2 class="text-2xl font-bold text-center mb-4">Kết quả làm bài</h2>
                <div class="text-center mb-6">
                    <div class="text-4xl font-bold text-blue-600 mb-2">
                        ${score.correct}/${score.total} câu đúng
                    </div>
                    <div class="text-xl">
                        Tỉ lệ đúng: <span class="font-semibold">${score.percentage}%</span>
                    </div>
                </div>
            </div>
        `;
        
        resultsContainer.innerHTML = resultsHtml;
        
        // Cuộn lên đầu trang
        window.scrollTo(0, 0);
    }

    /**
     * Tính điểm số
     */
    function calculateScore() {
        if (!currentExamData?.questions) return { correct: 0, total: 0, percentage: 0 };
        
        let correct = 0;
        let total = 0;
        
        // Trong phiên bản đơn giản này, chúng ta chỉ đếm số câu đã trả lời
        // Trong thực tế, bạn cần kiểm tra câu trả lời đúng/sai
        Object.keys(userAnswers).forEach(qId => {
            if (userAnswers[qId]) {
                correct++;
            }
            total++;
        });
        
        const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;
        
        return { correct, total, percentage };
    }

    /**
     * Bắt đầu đếm ngược thời gian
     * @param {number} duration - Thời gian làm bài (giây)
     */
    function startTimer(duration) {
        let timeLeft = duration;
        
        // Cập nhật thời gian ngay lập tức
        updateTimerDisplay(timeLeft);
        
        // Cập nhật thời gian mỗi giây
        timerInterval = setInterval(() => {
            timeLeft--;
            updateTimerDisplay(timeLeft);
            
            // Kết thúc khi hết giờ
            if (timeLeft <= 0) {
                clearInterval(timerInterval);
                submitExamBtn.click(); // Tự động nộp bài
            }
        }, 1000);
    }
    
    /**
     * Cập nhật hiển thị thời gian
     */
    function updateTimerDisplay(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        
        timerDisplay.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        
        // Đổi màu khi còn 5 phút
        if (seconds <= 300) {
            timerDisplay.classList.add('text-red-600', 'font-bold');
        } else {
            timerDisplay.classList.remove('text-red-600', 'font-bold');
        }
    }

    /**
     * Lấy giải thích từ AI (chức năng mẫu)
     */
    function getAIExplanation() {
        const query = userQueryInput.value.trim();
        if (!query) {
            alert('Vui lòng nhập câu hỏi hoặc thắc mắc của bạn.');
            return;
        }
        
        // Hiển thị trạng thái đang tải
        getAIExplanationBtn.disabled = true;
        getAIExplanationBtn.innerHTML = 'Đang xử lý...';
        aiExplanationArea.innerHTML = '<p class="text-gray-500">Đang tìm kiếm câu trả lời...</p>';
        
        // Giả lập việc gọi API AI
        setTimeout(() => {
            // Đây là phản hồi mẫu
            aiExplanationArea.innerHTML = `
                <div class="bg-white p-4 rounded-lg shadow">
                    <h3 class="font-bold text-lg mb-2">Giải thích cho câu hỏi của bạn:</h3>
                    <p>Đây là giải thích mẫu từ hệ thống AI. Trong phiên bản thực tế, câu trả lời sẽ được tạo ra dựa trên câu hỏi cụ thể của bạn.</p>
                    <div class="mt-3 p-2 bg-yellow-50 rounded text-sm">
                        <p class="font-medium text-yellow-700">Lưu ý:</p>
                        <p>Đây chỉ là câu trả lời mẫu. Trong phiên bản thực tế, hệ thống sẽ phân tích câu hỏi và đưa ra câu trả lời chính xác hơn.</p>
                    </div>
                </div>
            `;
            
            // Khôi phục trạng thái nút
            getAIExplanationBtn.disabled = false;
            getAIExplanationBtn.innerHTML = 'Hỏi AI';
            
            // Khởi tạo lại MathJax nếu cần
            if (window.MathJax) {
                MathJax.typeset();
            }
        }, 1500);
    }
});
