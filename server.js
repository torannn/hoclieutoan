const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const Groq = require('groq-sdk');
const OpenAI = require('openai');
const dotenv = require('dotenv');
const cors = require('cors');

dotenv.config();
const app = express();
const port = 3000;

app.use(cors());
app.use(express.json());

// Kh·ªüi t·∫°o c√°c client AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const groq = new Groq({ apiKey: process.env.GROQ_API_KEY });
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// H√†m generateWithFallback v·∫´n gi·ªØ nguy√™n ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh ·ªïn ƒë·ªãnh
async function generateWithFallback(prompt) {
    try {
        console.log("Attempting with Google Gemini...");
        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });
        const result = await model.generateContent(prompt);
        console.log("Success with Google Gemini.");
        return result.response.text();
    } catch (googleError) {
        if (googleError.status === 429 || googleError.status === 503) {
            console.warn(`Google API failed (${googleError.status}). Falling back to Groq...`);
            try {
                console.log("Attempting with Groq...");
                const chatCompletion = await groq.chat.completions.create({
                    messages: [{ role: 'user', content: prompt }],
                    model: 'llama3-8b-8192',
                });
                console.log("Success with Groq.");
                return chatCompletion.choices[0]?.message?.content || "";
            } catch (groqError) {
                console.error("Groq API failed. Falling back to OpenAI...", groqError.message);
                try {
                    console.log("Attempting with OpenAI...");
                    const chatCompletion = await openai.chat.completions.create({
                        messages: [{ role: "user", content: prompt }],
                        model: "gpt-4o-mini",
                    });
                    console.log("Success with OpenAI.");
                    return chatCompletion.choices[0]?.message?.content || "";
                } catch (openAIError) {
                    console.error("OpenAI API also failed:", openAIError.message);
                    throw openAIError;
                }
            }
        } else {
            console.error("An unhandled Google API error occurred:", googleError.message);
            throw googleError;
        }
    }
}


// Endpoint m·ªõi ƒë·ªÉ gi·∫£i ƒë√°p th·∫Øc m·∫Øc c·ªßa h·ªçc sinh
app.post('/get-explanation', async (req, res) => {
    try {
        const { question, modelAnswer, userQuery } = req.body;
        if (!question || !modelAnswer || !userQuery) {
            return res.status(400).json({ error: 'Thi·∫øu d·ªØ li·ªáu c√¢u h·ªèi, ƒë√°p √°n ho·∫∑c th·∫Øc m·∫Øc.' });
        }

        // --- PROMPT M·ªöI D√ÄNH CHO GI√ÅO VI√äN TO√ÅN AI ---
        const prompt = `
            B·∫°n l√† m·ªôt gi√°o vi√™n d·∫°y To√°n gi·ªèi v√† t·∫≠n t√¢m. Vai tr√≤ c·ªßa b·∫°n l√† gi·∫£i ƒë√°p th·∫Øc m·∫Øc c·ªßa h·ªçc sinh m·ªôt c√°ch r√µ r√†ng, d·ªÖ hi·ªÉu.
            
            D∆∞·ªõi ƒë√¢y l√† th√¥ng tin v·ªÅ m·ªôt b√†i to√°n:
            
            1.  **ƒê·ªÅ b√†i:**
                ${question.replace(/<[^>]*>/g, '')}  // Lo·∫°i b·ªè tag HTML ƒë·ªÉ AI t·∫≠p trung v√†o n·ªôi dung
            
            2.  **L·ªùi gi·∫£i m·∫´u (Ngu·ªìn th√¥ng tin ch√≠nh x√°c):**
                ${modelAnswer.replace(/<[^>]*>/g, '')} // Lo·∫°i b·ªè tag HTML
            
            3.  **Th·∫Øc m·∫Øc c·ªßa h·ªçc sinh:**
                "${userQuery}"

            **Nhi·ªám v·ª• c·ªßa b·∫°n:**
            - D·ª±a **ho√†n to√†n** v√†o "L·ªùi gi·∫£i m·∫´u" ƒë·ªÉ gi·∫£i th√≠ch. Kh√¥ng ƒë∆∞a ra ph∆∞∆°ng ph√°p gi·∫£i kh√°c tr·ª´ khi h·ªçc sinh y√™u c·∫ßu.
            - Tr·∫£ l·ªùi th·∫≥ng v√†o c√¢u h·ªèi c·ªßa h·ªçc sinh. Gi·∫£i th√≠ch t·ª´ng b∆∞·ªõc m·ªôt c√°ch c·∫∑n k·∫Ω n·∫øu c·∫ßn.
            - S·ª≠ d·ª•ng ng√¥n ng·ªØ ƒë∆°n gi·∫£n, th√¢n thi·ªán, nh∆∞ ƒëang n√≥i chuy·ªán tr·ª±c ti·∫øp v·ªõi h·ªçc sinh.
            - Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·∫≠p trung v√†o v·∫•n ƒë·ªÅ h·ªçc sinh ƒëang th·∫Øc m·∫Øc.
            - To√†n b·ªô c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n PH·∫¢I ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng trong m·ªôt kh·ªëi HTML duy nh·∫•t. S·ª≠ d·ª•ng th·∫ª <p> cho c√°c ƒëo·∫°n vƒÉn v√† <strong> ƒë·ªÉ nh·∫•n m·∫°nh c√°c √Ω ch√≠nh. Kh√¥ng s·ª≠ d·ª•ng Markdown.

            V√≠ d·ª• ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi:
            <div>
                <p>Ch√†o em, c√¢u h·ªèi c·ªßa em r·∫•t hay! ƒê·ªÉ anh/ch·ªã gi·∫£i th√≠ch nh√©.</p>
                <p>·ªû b∆∞·ªõc 2 c·ªßa l·ªùi gi·∫£i, ch√∫ng ta c√≥ ... s·ªü dƒ© ph·∫£i l√†m v·∫≠y l√† v√¨ ...</p>
                <p><strong>ƒêi·ªÉm m·∫•u ch·ªët ·ªü ƒë√¢y l√†:</strong> ...</p>
                <p>Hy v·ªçng em ƒë√£ hi·ªÉu r√µ h∆°n. N·∫øu c√≤n th·∫Øc m·∫Øc, ƒë·ª´ng ng·∫ßn ng·∫°i h·ªèi ti·∫øp nh√©!</p>
            </div>
        `;

        const explanationText = await generateWithFallback(prompt);
        // D·ªçn d·∫πp output t·ª´ AI ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ l√† HTML h·ª£p l·ªá
        let cleanedText = explanationText.replace(/```html/g, '').replace(/```/g, '').trim();
        
        // ƒê·∫£m b·∫£o lu√¥n c√≥ m·ªôt container div bao b·ªçc
        if (!cleanedText.startsWith('<div>')) {
            cleanedText = `<div>${cleanedText}</div>`;
        }
        
        res.json({ explanation: cleanedText });

    } catch (error) {
        console.error('Server Error:', error.message);
        res.status(500).json({ error: 'Kh√¥ng th·ªÉ nh·∫≠n ƒë∆∞·ª£c gi·∫£i th√≠ch t·ª´ AI.' });
    }
});

// Ph·ª•c v·ª• c√°c file tƒ©nh (quan tr·ªçng ƒë·ªÉ HTML c√≥ th·ªÉ t·∫£i JS v√† CSS)
app.use(express.static(__dirname));

app.listen(port, () => {
    console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${port}`);
});